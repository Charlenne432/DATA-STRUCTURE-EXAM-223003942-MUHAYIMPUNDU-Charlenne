#include <iostream> // (for input and output operation)
#include <cstring> // (for C-style string operations (strcpy, strcmp)
using namespace std;

// 1. Define struct Contact
struct Contact {
    char name [30]; // stores contact’s name
    char phone [15]; // stores contact’s phone number
};

// Function to dynamically allocate Contact array
Contact* allocateContacts(int count) {
    return new Contact[count]; // Dynamically allocate array of contacts
}

// 2. Abstract class ContactBase
class ContactBase {
public:
    char name[30]; // common name for all contacts
    char phone[15]; // common phone for all contacts
// Constructor to initialize name and phone
    ContactBase(const char* n, const char* p) {
        strncpy(name, n, 29); name[29] = '\0';
        strncpy(phone, p, 14); phone[14] = '\0';
    }

    virtual void display() = 0; // Pure virtual display function for polymorphic behavior
    virtual ~ContactBase() {} // virtual destructor to allow proper cleanup
};

class FriendContact : public ContactBase { // Friend contact derived from contact base
public:
    char relation[20];
// Constructor initializes all attributes 
    FriendContact(const char* n, const char* p, const char* r) 
        : ContactBase(n, p) {
        strncpy(relation, r, 19); relation[19] = '\0';
    }

    void display() {  // Override display function for friend
        cout << "Friend: " << name << ", Phone: " << phone
             << ", Relation: " << relation << endl;
    }
};


class ColleagueContact : public ContactBase { // Colleague contact derived from contactbase
public:
    char jobTitle[20];
// Constructor 
    ColleagueContact(const char* n, const char* p, const char* jt)
        : ContactBase(n, p) {
        strncpy(jobTitle, jt, 19); jobTitle[19] = '\0';
    }

    void display() { // Override display function for colleague
        cout << "Colleague: " << name << ", Phone: " << phone
             << ", Job Title: " << jobTitle << endl;
    }
};

// Global contact list using base class pointer array
ContactBase** allContacts = NULL; // Dynamic array of contact base pointers 
int contactCount = 0; // Number of stored contacts

// group struct for managing contacts in a group
struct Group {
    char groupName[20]; // Nmae of the group
    ContactBase** members; // Dynamic array of contact pointers 
    int memberCount; // Count of current group members

    Group(const char* name) { // Constructor to initialize group
        strncpy(groupName, name, 19); groupName[19] = '\0';
        members = NULL;
        memberCount = 0;
    }
// Add a member to the group
    void addMember(ContactBase* contact) {
// Create a new array with space for one more member
        ContactBase** newMembers = new ContactBase*[memberCount + 1];
// Copy existing members to the new array
        for (int i = 0; i < memberCount; ++i)
            newMembers[i] = members[i];
// Add new contact at the end
        newMembers[memberCount] = contact;
// Update count and replace old array
        ++memberCount;
        delete[] members;
        members = newMembers;
    }
// Remove a member by name using pointer arithmetic
    void removeMember(const char* nameToRemove) {
        int index = -1;
// Search a member to remove
        for (int i = 0; i < memberCount; ++i) {
            if (strcmp(members[i]->name, nameToRemove) == 0) {
                index = i;
                break;
            }
        }
// If not found, exit
        if (index == -1) return;
// Allocate new array with one less member
        ContactBase** newMembers = new ContactBase*[memberCount - 1];
//Copy all except the one to remove       
 for (int i = 0, j = 0; i < memberCount; ++i) {
            if (i != index) newMembers[j++] = members[i];
        }
//update meber count and array
        delete[] members;
        members = newMembers;
        --memberCount;
    }
//Display all members in the group
    void displayGroup() {
        cout << "\nGroup: " << groupName << " (" << memberCount << " members)\n";
        for (int i = 0; i < memberCount; ++i) {
            members[i]->display(); // Polymorphic call
        }
    }
//Destructor to free memory
    ~Group() {
        delete[] members;
    }
};

Group** groups = NULL;     //Dynamic array of group pointers
int groupCount = 0;         //Number of groups

void addGroup(const char* name) {  //Add new group
    Group** newGroups = new Group*[groupCount + 1]; //Allocate new array for one extra group
    for (int i = 0; i < groupCount; ++i)    //Copy existing groups
        newGroups[i] = groups[i];       
//Add new group at the end
    newGroups[groupCount] = new Group(name);
    ++groupCount;    //Update count and array
    delete[] groups;
    groups = newGroups;
}
//Removes group by name
void removeGroup(const char* nameToRemove) {
    int index = -1;
//Find the group by name
    for (int i = 0; i < groupCount; ++i) {
        if (strcmp(groups[i]->groupName, nameToRemove) == 0) {
            index = i;
            break;
        }
    }
//If not found, exit
    if (index == -1) return;

    delete groups[index];      //Delete the group object
    Group** newGroups = new Group*[groupCount - 1];  //Allocate ne array with one less group
//Copy remaining groups
    for (int i = 0, j = 0; i < groupCount; ++i) {
        if (i != index) newGroups[j++] = groups[i];
    }
//Update counts and array
    delete[] groups;
    groups = newGroups;
    --groupCount;
}

//Main Function
int main() {
    //Allocate raw contactstruct array
    Contact* rawContacts = allocateContacts(2);
//Fill contact details annually
    strncpy(rawContacts[0].name, "John", 29);
    strncpy(rawContacts[0].phone, "123456", 14);
    strncpy(rawContacts[1].name, "Emma", 29);
    strncpy(rawContacts[1].phone, "987654", 14);

    //Create polymorphic contact
    allContacts = new ContactBase*[2]; //Allocate space
    allContacts[0] = new FriendContact("John", "123456", "School");
    allContacts[1] = new ColleagueContact("Emma", "987654", "Engineer");
    contactCount = 2;

    //Display all contacts
    cout << "All Contacts:\n";
    for (int i = 0; i < contactCount; ++i) {
        allContacts[i]->display(); // Polymorphic call  //Calls correct derived display
    }

    //Add a group and Add members to group
    addGroup("WorkGroup");
    groups[0]->addMember(allContacts[0]);   //Add John
    groups[0]->addMember(allContacts[1]);   //Add Emma
    groups[0]->displayGroup();   //Display members

    //Remove member and show result
    groups[0]->removeMember("John");
    groups[0]->displayGroup();  //Display after removal

   //Remove the groups
    removeGroup("WorkGroup");

    //Free memory used by contacts
    for (int i = 0; i < contactCount; ++i)
        delete allContacts[i];
    delete[] allContacts;
    delete[] rawContacts; //Free raw contact memory
    delete[] groups; //Free group array

    return 0;
}




